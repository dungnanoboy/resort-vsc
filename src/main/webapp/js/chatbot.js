class DunhuthChatbot {
    constructor() {
        this.apiKey = 'AIzaSyCFhG1QjuUIJuFFEswOix7fcArUYKbk3VY'; // Thay th·∫ø b·∫±ng API key th·ª±c t·∫ø
        this.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
        this.isOpen = false;
        this.init();
    }    init() {
        console.log('Initializing Dunhuth Chatbot...');
        this.createChatbotHTML();
        this.bindEvents();
        this.addWelcomeMessage();
        console.log('Chatbot initialized successfully!');
    }

    createChatbotHTML() {
        const chatbotHTML = `
            <div class="chatbot-container">
                <button class="chatbot-toggle" id="chatbot-toggle">
                    <i class="fa fa-comments"></i>
                </button>
                <div class="chatbot-window" id="chatbot-window">
                    <div class="chatbot-header">
                        <h4><i class="fa fa-user"></i> Dunhuth Assistant</h4>
                        <button class="chatbot-close" id="chatbot-close">√ó</button>
                    </div>
                    <div class="chatbot-messages" id="chatbot-messages">
                        <!-- Messages will be added here -->
                    </div>
                    <div class="chatbot-input">
                        <div class="input-group">
                            <input type="text" id="chatbot-input" placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..." maxlength="500">
                            <button class="send-btn" id="send-btn">G·ª≠i</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', chatbotHTML);
        console.log('Chatbot HTML added to page');
    }

    bindEvents() {
        const toggle = document.getElementById('chatbot-toggle');
        const close = document.getElementById('chatbot-close');
        const input = document.getElementById('chatbot-input');
        const sendBtn = document.getElementById('send-btn');

        toggle.addEventListener('click', () => this.toggleChat());
        close.addEventListener('click', () => this.closeChat());
        sendBtn.addEventListener('click', () => this.sendMessage());
        
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // Prevent chatbot from closing when clicking inside
        document.getElementById('chatbot-window').addEventListener('click', (e) => {
            e.stopPropagation();
        });
    }

    toggleChat() {
        const window = document.getElementById('chatbot-window');
        this.isOpen = !this.isOpen;
        
        if (this.isOpen) {
            window.style.display = 'flex';
            document.getElementById('chatbot-input').focus();
        } else {
            window.style.display = 'none';
        }
    }

    closeChat() {
        document.getElementById('chatbot-window').style.display = 'none';
        this.isOpen = false;
    }

    addWelcomeMessage() {
        const welcomeMessage = `
            Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Dunhuth Resort. 
            T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
            
            üè® Th√¥ng tin v·ªÅ ph√≤ng v√† d·ªãch v·ª•
            üìÖ T∆∞ v·∫•n ƒë·∫∑t ph√≤ng
            üçΩÔ∏è Th√¥ng tin nh√† h√†ng v√† ·∫©m th·ª±c
            üéØ C√°c ho·∫°t ƒë·ªông v√† tour du l·ªãch
            üìç Th√¥ng tin v·ªÅ khu v·ª±c xung quanh
            
            B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?
        `;
        this.addMessage(welcomeMessage, 'bot');
    }

    async sendMessage() {
        const input = document.getElementById('chatbot-input');
        const message = input.value.trim();
        
        if (!message) return;

        // Add user message
        this.addMessage(message, 'user');
        input.value = '';

        // Show typing indicator
        this.showTyping();

        try {
            // Get bot response
            const response = await this.getBotResponse(message);
            this.hideTyping();
            this.addMessage(response, 'bot');
        } catch (error) {
            this.hideTyping();
            this.addMessage('Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
            console.error('Chatbot error:', error);
        }
    }

    addMessage(message, sender) {
        const messagesContainer = document.getElementById('chatbot-messages');
        const messageElement = document.createElement('div');
        messageElement.className = `message ${sender}`;
        
        const avatar = sender === 'bot' ? 'D' : 'U';
        const avatarClass = sender === 'bot' ? 'message-avatar' : 'message-avatar user-avatar';
        
        messageElement.innerHTML = `
            ${sender === 'bot' ? `<div class="${avatarClass}">${avatar}</div>` : ''}
            <div class="message-content">${this.formatMessage(message)}</div>
            ${sender === 'user' ? `<div class="${avatarClass}">${avatar}</div>` : ''}
        `;
        
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    formatMessage(message) {
        // Convert line breaks to HTML
        return message.replace(/\n/g, '<br>');
    }

    showTyping() {
        const messagesContainer = document.getElementById('chatbot-messages');
        const typingElement = document.createElement('div');
        typingElement.className = 'message bot';
        typingElement.id = 'typing-indicator';
        
        typingElement.innerHTML = `
            <div class="message-avatar">D</div>
            <div class="typing-indicator">
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;
        
        messagesContainer.appendChild(typingElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    hideTyping() {
        const typingElement = document.getElementById('typing-indicator');
        if (typingElement) {
            typingElement.remove();
        }
    }

    async getBotResponse(userMessage) {
        // N·∫øu ch∆∞a c√≥ API key, tr·∫£ v·ªÅ response m·∫∑c ƒë·ªãnh
        if (!this.apiKey || this.apiKey === 'YOUR_GEMINI_API_KEY') {
            return this.getDefaultResponse(userMessage);
        }

        const prompt = this.createPrompt(userMessage);
        
        const requestBody = {
            contents: [{
                parts: [{
                    text: prompt
                }]
            }],
            generationConfig: {
                temperature: 0.7,
                topK: 1,
                topP: 1,
                maxOutputTokens: 2048,
            }
        };

        try {
            const response = await fetch(`${this.apiUrl}?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                return data.candidates[0].content.parts[0].text;
            } else {
                return this.getDefaultResponse(userMessage);
            }
        } catch (error) {
            console.error('API Error:', error);
            return this.getDefaultResponse(userMessage);
        }
    }

    createPrompt(userMessage) {
        return `B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa Dunhuth Resort, m·ªôt khu ngh·ªâ d∆∞·ª°ng cao c·∫•p t·∫°i Vi·ªát Nam. 
        H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch th√¢n thi·ªán, chuy√™n nghi·ªáp v√† h·ªØu √≠ch.
        
        Th√¥ng tin v·ªÅ resort:
        - T√™n: Dunhuth Resort
        - ƒê·ªãa ch·ªâ: 300 Nguyen Van Cu, Vinh, Nghe An
        - ƒêi·ªán tho·∫°i: +898 649 747
        - Email: dungnanoboy@dunduth.com
        - C√°c lo·∫°i ph√≤ng: Standard Room, Deluxe Room, Family Room, Bungalow, Suite, Presidential Suite, Villa, Pool Villa Room, Luxury Ocean View Suite
        - D·ªãch v·ª•: Nh√† h√†ng, Spa, H·ªì b∆°i, Gym, Tour du l·ªãch
        - Gi√° ph√≤ng t·ª´ $100-$1000/ƒë√™m t√πy lo·∫°i ph√≤ng
        
        C√¢u h·ªèi c·ªßa kh√°ch: ${userMessage}
        
        H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng v√† h·ªØu √≠ch (kh√¥ng qu√° 200 t·ª´):`;
    }

    getDefaultResponse(userMessage) {
        const lowerMessage = userMessage.toLowerCase();
        
        // Ph√≤ng v√† gi√° c·∫£
        if (lowerMessage.includes('ph√≤ng') || lowerMessage.includes('room')) {
            return `üè® Dunhuth Resort c√≥ 9 lo·∫°i ph√≤ng kh√°c nhau:
            
            ‚Ä¢ Standard Room: $100/ƒë√™m (2 ng∆∞·ªùi)
            ‚Ä¢ Deluxe Room: $150/ƒë√™m (2 ng∆∞·ªùi) 
            ‚Ä¢ Family Room: $200/ƒë√™m (4 ng∆∞·ªùi)
            ‚Ä¢ Bungalow: $250/ƒë√™m (2 ng∆∞·ªùi)
            ‚Ä¢ Suite: $300/ƒë√™m (4 ng∆∞·ªùi)
            ‚Ä¢ Presidential Suite: $500/ƒë√™m (6 ng∆∞·ªùi)
            ‚Ä¢ Villa: $888/ƒë√™m (8 ng∆∞·ªùi)
            ‚Ä¢ Pool Villa Room: $1000/ƒë√™m (2 ng∆∞·ªùi)
            ‚Ä¢ Luxury Ocean View Suite: $169/ƒë√™m (4 ng∆∞·ªùi)
            
            T·∫•t c·∫£ ph√≤ng ƒë·ªÅu c√≥ ƒë·∫ßy ƒë·ªß ti·ªán nghi hi·ªán ƒë·∫°i!`;
        }
        
        // ƒê·∫∑t ph√≤ng
        if (lowerMessage.includes('ƒë·∫∑t') || lowerMessage.includes('book')) {
            return `üìÖ ƒê·ªÉ ƒë·∫∑t ph√≤ng, b·∫°n c√≥ th·ªÉ:
            
            ‚Ä¢ S·ª≠ d·ª•ng form "Book A Room" tr√™n website
            ‚Ä¢ G·ªçi ƒëi·ªán: +898 649 747
            ‚Ä¢ Email: dungnanoboy@dunduth.com
            ‚Ä¢ Ho·∫∑c truy c·∫≠p m·ª•c "My Booking" ƒë·ªÉ theo d√µi ƒë·∫∑t ph√≤ng
            
            Ch√∫ng t√¥i c√≥ h·ªó tr·ª£ m√£ gi·∫£m gi√° v√† thanh to√°n linh ho·∫°t!`;
        }
        
        // ƒê·ªãa ch·ªâ v√† li√™n h·ªá
        if (lowerMessage.includes('ƒë·ªãa ch·ªâ') || lowerMessage.includes('li√™n h·ªá') || lowerMessage.includes('contact')) {
            return `üìç Th√¥ng tin li√™n h·ªá Dunhuth Resort:
            
            ‚Ä¢ ƒê·ªãa ch·ªâ: 300 Nguyen Van Cu, Vinh, Nghe An
            ‚Ä¢ ƒêi·ªán tho·∫°i: +898 649 747
            ‚Ä¢ Email: dungnanoboy@dunduth.com
            ‚Ä¢ Website: www.dunhuthresort.com
            
            Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng ph·ª•c v·ª• b·∫°n 24/7!`;
        }
        
        // D·ªãch v·ª•
        if (lowerMessage.includes('d·ªãch v·ª•') || lowerMessage.includes('service')) {
            return `üéØ Dunhuth Resort cung c·∫•p ƒë·∫ßy ƒë·ªß d·ªãch v·ª•:
            
            ‚Ä¢ üçΩÔ∏è Nh√† h√†ng cao c·∫•p
            ‚Ä¢ üíÜ‚Äç‚ôÄÔ∏è Spa th∆∞ gi√£n
            ‚Ä¢ üèä‚Äç‚ôÇÔ∏è H·ªì b∆°i ngo√†i tr·ªùi
            ‚Ä¢ üí™ Ph√≤ng gym hi·ªán ƒë·∫°i
            ‚Ä¢ üöó Tour du l·ªãch
            ‚Ä¢ üéÆ Khu vui ch∆°i gi·∫£i tr√≠
            ‚Ä¢ üèñÔ∏è B√£i bi·ªÉn ri√™ng
            
            M·ªçi d·ªãch v·ª• ƒë·ªÅu ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ mang l·∫°i tr·∫£i nghi·ªám t·ªët nh·∫•t!`;
        }
        
        // M·∫∑c ƒë·ªãnh
        return `C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn Dunhuth Resort! 
        
        T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:
        ‚Ä¢ Th√¥ng tin ph√≤ng v√† gi√° c·∫£
        ‚Ä¢ H∆∞·ªõng d·∫´n ƒë·∫∑t ph√≤ng
        ‚Ä¢ D·ªãch v·ª• c·ªßa resort
        ‚Ä¢ Th√¥ng tin li√™n h·ªá
        
        B·∫°n c√≥ c√¢u h·ªèi c·ª• th·ªÉ n√†o kh√¥ng?`;
    }
}

// Initialize chatbot when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing chatbot...');
    // Wait a bit more to ensure all libraries are loaded
    setTimeout(function() {
        try {
            new DunhuthChatbot();
        } catch (error) {
            console.error('Error initializing chatbot:', error);
        }
    }, 1000);
});

// Fallback initialization
window.addEventListener('load', function() {
    // Check if chatbot already exists
    if (!document.getElementById('chatbot-toggle')) {
        console.log('Fallback: initializing chatbot...');
        try {
            new DunhuthChatbot();
        } catch (error) {
            console.error('Fallback error initializing chatbot:', error);
        }
    }
});
